[
  {
    "objectID": "intro/index.html",
    "href": "intro/index.html",
    "title": "Verona Interfaces - Einführung",
    "section": "",
    "text": "Es geht auf den Seiten dieser Dokumentation um große Vergleichsstudien oder Befragungen im Rahmen des nationalen Bildungsmonitorings. Hierfür ist der Begriff “Large Scale Assessments” etabliert. Die hohe Anzahl der Testpersonen soll ein datenbasiertes wissenschaftliches Monitoring des Bildungssystems ermöglichen, also Zusammenhänge sichtbar machen zwischen den Einflussfaktoren und dem Erreichen von Bildungszielen. Eine Vergleichsstudie ist in hohem Maße standardisiert und wird in einem engen Zeitfenster synchron durchgeführt.\nDer Fokus liegt also nicht auf der Einzelperson - der Schülerin oder des Schülers -, sondern auf Gruppen von Personen - Klassen, Schulen, Bezirke, Länder. Die Erkenntnisse aus den aufwändigen Testungen sollen aber nicht nur der obersten Steuerungsebene zufließen, sondern es ist an vielen Stellen eine Auswertung der Analyseergebnisse durch die Lehrkraft vorgesehen. Diese sogenannten Rückmeldungen ermöglichen durch den hohen Grad der Standardisierung eine Verortung der Leistungen der Klasse im Land und auch länderübergreifend.",
    "crumbs": [
      "Einführung"
    ]
  },
  {
    "objectID": "intro/index.html#lesen-sie-weiter",
    "href": "intro/index.html#lesen-sie-weiter",
    "title": "Verona Interfaces - Einführung",
    "section": "Lesen Sie weiter",
    "text": "Lesen Sie weiter\n\nComputerbasiertes Testen: Modellierung der Datenflüsse für computerbasierte Vergleichsstudien und institutionelle Szenarien\nArchitektur: Die Schnittstellen dieser Dokumentation folgen einem einheitlichen technischen Muster",
    "crumbs": [
      "Einführung"
    ]
  },
  {
    "objectID": "intro/index.html#name-und-logo",
    "href": "intro/index.html#name-und-logo",
    "title": "Verona Interfaces - Einführung",
    "section": "Name und Logo",
    "text": "Name und Logo\nEine der großen Lernstandserhebungen in Deutschland ist unter dem Namen VERA bekannt (VERgleichsArbeiten), und aus der Kombination mit Online ist dann die Bezeichnung Verona entstanden. Das Logo1 stellt eine Leiter dar - italienisch “la scala”. Skalieren ist ein wichtiger methodischer Schritt bei der Auswertung der Antworten, und die Scaliger (Scaligeri, della Scala, deutsch oft auch Skaliger, historisch auch Herren von der Leiter) waren Herren der italienischen Stadt Verona von 1262 bis 1387. Die unterschiedlichen Einfärbungen zwischen den Sprossen stehen für verschiedene Endgeräte.",
    "crumbs": [
      "Einführung"
    ]
  },
  {
    "objectID": "intro/index.html#footnotes",
    "href": "intro/index.html#footnotes",
    "title": "Verona Interfaces - Einführung",
    "section": "Fußnoten",
    "text": "Fußnoten\n\n\ncredits to HoffmannP 2019↩︎",
    "crumbs": [
      "Einführung"
    ]
  },
  {
    "objectID": "intro/architecture.html",
    "href": "intro/architecture.html",
    "title": "Architektur",
    "section": "",
    "text": "Verona-Module als Plug-in\nUm für VERA die Länder bzw. die durchführenden Einrichtungen in die Lage zu versetzen, Aufgaben des IQB direkt einzusetzen, hat das IQB Komponenten für Webanwendungen entwickelt, die sich gut in vorhandene Webanwendungen einfügen lassen. Durch eine einfache standardisierte Schnittstelle wird diese Komponente in einen Bildschirmbereich geladen und kann anschließend die Aufgabe darstellen. Das Plug-in “Player” beispielsweise präsentiert alle Inhalte auf eine bei der Aufgabenentwicklung festgelegte Art und Weise (z. B. zeitverzögertes Audio, automatische Navigation, Textmarkierung, Aus- und Einblenden von Formular-Elementen je nach Stand der Beantwortung usw.).\n\n\n\n\n\nflowchart BT\n    subgraph Testsystem\n        TC[Testablaufsteuerung]--&gt;|Aufgabendefinition| P[Player]\n        style TC fill:white\n        style P fill:white\n        P--&gt;|Antworten| TC\n    end\n    style Testsystem fill:#d1d1e0,stroke:#d1d1e0\n    DB[(Datenbank)]&lt;--&gt; TC\n\n\n\n\n\n\nWährend einer Testung können Player-Module nach Bedarf ausgetauscht werden. Aus diesem Plug-in-Modell ergibt sich eine hohe Flexibilität für das Testsystem: Neue Funktionen der Interaktion führen nur zum Laden einer neuen Player-Version - das Testsystem bleibt unverändert. Weitere Vorteile:\n\nÄltere Player können alte Aufgaben lange abspielen - solange die Schnittstelle des Plug-ins unterstützt wird\nPlayer für besondere Anwendungsfälle (z. B. Lesegeschwindigkeitstest, Physik-Experimente) werden nur einmal programmiert und dann allen Interessierten zur Verfügung gestellt\n\nWir nennen die Webanwendung, die das Plug-in lädt, “Host”.\n\n\nTechnische Umsetzung\nEs handelt sich bei den Verona-Modulen um Code für das Frontend. Das Plug-in beansprucht einen rechteckigen Bereich des Bildschirmes und führt darin JavaScript aus. Um die Nebenwirkungen für den Host so gering wie möglich zu halten, ist das Modul technisch eine eigene Html-Seite, die in ein iframe-Element geladen wird. Die Kommunikation zwischen Host und Modul erfolgt asynchron über postMessage().\n\n\nKonventionen\nFür alle Module gelten folgende Grundsätze:\n\nDas Modul muss in einer einzigen Datei zusammengefasst sein. Der Build-Prozess muss also alle sonst separat vorliegenden Komponenten einer Html-Seite (Styles, Code, Schriften, Bilder usw.) zusammenbinden.\nAußer über postMessage() darf das Modul keinen weiteren Kontakt mit der Außenwelt pflegen. Jedweder Zugriff auf Ressourcen des Hosts (Frontend, Backend) oder auf andere Web-Ressourcen ist nicht gestattet.\nDem Modul werden Daten übergeben, die dann das Verhalten, die Erscheinung usw. beeinflussen. Ein Player z. B. bekommt die sog. Unit-Definition, ein Schemer das Unit-Kodierschema. Diese Daten dürfen selbst keinen Code enthalten.\nDas Modul muss Metadaten in einem JSON-LD-Format (z. B. Version, Maintainer usw., s. u.) enthalten.\n\n\n\nDatensicherheit\nDiese Konventionen dienen der Datensicherheit. Es muss eine verlässliche Basis für die Abschätzung von Risiken geben, die durch die Plug-in-Technik verursacht werden. Sollten diese Konventionen nicht eingehalten werden können, muss dazu eine ausführliche Dokumentation zur Verfügung stehen. Das Modul muss alles Machbare unternehmen, die aus der Abweichung resultierenden Risiken zu minimieren und zu dokumentieren. Beispiele:\n\nPlayer und Editor des Aspect-Paketes des IQB nutzen GeoGebra, also eine Programmierung Dritter. Dies wird während der Laufzeit je nach Bedarf nachgeladen. Das IQB steht in direktem Kontakt mit dem Entwicklungsteam, um Risiken abzuschätzen.\nDer Simple-Player und einige andere Module des IQB haben als Teil der Datenstruktur Html-Code, der dann zur Anzeige gebracht wird. Hier besteht potenziell ein Risiko, dass Code mit eingeschleust wird. Daher wird konsequent ein sog. Sanitizer verwendet, also eine Bibliothek, die verlässlich Code vor der Anzeige aus dem Html entfernt.",
    "crumbs": [
      "Einführung",
      "Architektur"
    ]
  },
  {
    "objectID": "intro/tba.html",
    "href": "intro/tba.html",
    "title": "Computerbasiertes Testen",
    "section": "",
    "text": "Die folgenden Ausführungen beziehen sich stets auch auf Befragungen. Die Anforderungen an Befragungen sind ähnlich, aber meist einfacher umzusetzen. Es gibt beispielsweise keine Kodierung in “Richtig” oder “Falsch”.\nDass Befragungen hier auch technisch mit abgedeckt werden (können) liegt daran, dass große Studien zur Erfassung von Kompetenzen stets auch Befragungen mit einschließen. Auf diesem Weg ist es möglich, Einflussfaktoren über Personenmerkmale zu erheben.\n\n\n\nDas Durchführungsszenario sieht bei der Testperson ein Endgerät vor, das dem Begriff des “Computers” entspricht. Es sind also Desktop-Geräte, Laptops, Notebooks und teilweise auch Smartphones im Einsatz.\nDer Begriff “technologiebasiert” möchte betonen, dass es nicht unbedingt eines Computers bedarf, um digital Antworten zu erfassen. Prominentes Beispiel wäre ein Stift, der auf Spezialpapier Geschriebenes erkennt (scannen in Echtzeit) und in einen Speicher ablegt für spätere Auswertungen. Diese Überlegungen führten zum Begriff TBA - “Technologiebasiertes Assessment” oder “Technology Based Assessment”, wobei Technologie hier eher als Technik verstanden wird (Papierverfahren sind eigentlich auch Technologien).\nLetztlich sind diese Unterscheidungen hier nicht relevant und werden daher synonym verwendet. Man könnte auch eAssessment, digitales Testen usw. verwenden.",
    "crumbs": [
      "Einführung",
      "Computerbasiertes Testen"
    ]
  },
  {
    "objectID": "intro/tba.html#test-oder-befragung",
    "href": "intro/tba.html#test-oder-befragung",
    "title": "Computerbasiertes Testen",
    "section": "",
    "text": "Die folgenden Ausführungen beziehen sich stets auch auf Befragungen. Die Anforderungen an Befragungen sind ähnlich, aber meist einfacher umzusetzen. Es gibt beispielsweise keine Kodierung in “Richtig” oder “Falsch”.\nDass Befragungen hier auch technisch mit abgedeckt werden (können) liegt daran, dass große Studien zur Erfassung von Kompetenzen stets auch Befragungen mit einschließen. Auf diesem Weg ist es möglich, Einflussfaktoren über Personenmerkmale zu erheben.",
    "crumbs": [
      "Einführung",
      "Computerbasiertes Testen"
    ]
  },
  {
    "objectID": "intro/tba.html#computerbasiert-vs.-technologiebasiert",
    "href": "intro/tba.html#computerbasiert-vs.-technologiebasiert",
    "title": "Computerbasiertes Testen",
    "section": "",
    "text": "Das Durchführungsszenario sieht bei der Testperson ein Endgerät vor, das dem Begriff des “Computers” entspricht. Es sind also Desktop-Geräte, Laptops, Notebooks und teilweise auch Smartphones im Einsatz.\nDer Begriff “technologiebasiert” möchte betonen, dass es nicht unbedingt eines Computers bedarf, um digital Antworten zu erfassen. Prominentes Beispiel wäre ein Stift, der auf Spezialpapier Geschriebenes erkennt (scannen in Echtzeit) und in einen Speicher ablegt für spätere Auswertungen. Diese Überlegungen führten zum Begriff TBA - “Technologiebasiertes Assessment” oder “Technology Based Assessment”, wobei Technologie hier eher als Technik verstanden wird (Papierverfahren sind eigentlich auch Technologien).\nLetztlich sind diese Unterscheidungen hier nicht relevant und werden daher synonym verwendet. Man könnte auch eAssessment, digitales Testen usw. verwenden.",
    "crumbs": [
      "Einführung",
      "Computerbasiertes Testen"
    ]
  },
  {
    "objectID": "intro/tba.html#aufgabenentwicklung",
    "href": "intro/tba.html#aufgabenentwicklung",
    "title": "Computerbasiertes Testen",
    "section": "Aufgabenentwicklung",
    "text": "Aufgabenentwicklung\nDie Testaufgaben für die Durchführung der Bildungstrendstudien und für die Vergleichsarbeiten der Länder (VERA; s. KMK) werden am IQB entwickelt. Es erfolgt in jedem Fall eine empirische Erprobung einer jeden Aufgabe (sog. Pilotierung). Für die Aufgaben werden auch die Vorschriften für die Kodierung entwickelt.",
    "crumbs": [
      "Einführung",
      "Computerbasiertes Testen"
    ]
  },
  {
    "objectID": "intro/tba.html#bildungstrend---länderübergreifend",
    "href": "intro/tba.html#bildungstrend---länderübergreifend",
    "title": "Computerbasiertes Testen",
    "section": "Bildungstrend - länderübergreifend",
    "text": "Bildungstrend - länderübergreifend\nDie Studien des Bildungstrends in den Jahrgängen 4 und 9 werden online auf Servern durchgeführt, die das IQB bereitstellt. Ein auf die Durchführung großer Bildungsstudien spezialisierter Auftragnehmer (nachfolgend “AN Durchführung”) bereitet die Testung vor und begleitet die Durchführung in den Schulen vor Ort mit Testleiterinnen und Testleitern. Hier erfolgt auch die Kodierung der Antworten, und das IQB bekommt einen umfassenden Datensatz sowie begleitende Dokumentation.\n\n\n\n\n\nsequenceDiagram\n    participant IQB\n    participant AN as AN Durchführung\n    Actor Schule\n    IQB-&gt;&gt;AN: Nennung Schulen\n    AN-&gt;&gt;Schule: System-Check\n    Schule-&gt;&gt;AN: Meldung Testpersonen\n    IQB-&gt;&gt;AN: Aufgaben\n    AN-&gt;&gt;Schule: Logins\n    note right of Schule: Testdurchführung\n    Schule-&gt;&gt;AN: Antworten+Logs roh\n    AN-&gt;&gt;IQB: Ergebnisse kodiert\n    note left of IQB: Auswertung, Bericht",
    "crumbs": [
      "Einführung",
      "Computerbasiertes Testen"
    ]
  },
  {
    "objectID": "intro/tba.html#vera---in-jedem-land-separat",
    "href": "intro/tba.html#vera---in-jedem-land-separat",
    "title": "Computerbasiertes Testen",
    "section": "VERA - in jedem Land separat",
    "text": "VERA - in jedem Land separat\nDie jährlichen Vergleichsarbeiten in den Jahrgängen 3 und 8 führt ein Land in eigener Regie durch. Das IQB liefert Aufgaben einschl. Kodierschema sowie Vorschläge für den Testablauf (Testmodule, Testhefte). Im Schema unten ist der häufige Fall dargestellt, dass das Land eine Einrichtung (z. B. ein universitäres Projekt) mit der Durchführung beauftragt.\n\n\n\n\n\nsequenceDiagram\n    participant IQB\n    participant Land\n    participant DE as Durchführende Einrichtung\n    Actor Schule\n    IQB-&gt;&gt;Land: Aufgaben\n    Land-&gt;&gt;DE: Nennung Schulen\n    DE-&gt;&gt;Schule: System-Check\n    Schule-&gt;&gt;DE: Meldung Testpersonen\n    Land-&gt;&gt;DE: Aufgaben\n    DE-&gt;&gt;Schule: Logins\n    note right of Schule: Testdurchführung\n    note right of Schule: Kodierung\n    Schule-&gt;&gt;DE: Antworten kodiert\n    note left of DE: Auswertung\n    DE-&gt;&gt;Schule: Rückmeldung\n    DE-&gt;&gt;Land: Rückmeldung\n\n\n\n\n\n\nDie Antworten werden in diesem Szenario durch die Lehrkräfte kodiert. Nach der Auswertung durch die durchführende Einrichtung meldet diese in die Schulen und dem Auftraggeber die Ergebnisse, um die Unterrichtsentwicklung zu fördern sowie eine Evaluation auf Systemebene zu ermöglichen.",
    "crumbs": [
      "Einführung",
      "Computerbasiertes Testen"
    ]
  },
  {
    "objectID": "player/msg1_start.html",
    "href": "player/msg1_start.html",
    "title": "Verona Interfaces - Player",
    "section": "",
    "text": "Verona Interfaces - Player Message1 Start"
  },
  {
    "objectID": "editor/index.html",
    "href": "editor/index.html",
    "title": "Verona Interfaces - Editor",
    "section": "",
    "text": "Verona Interfaces - Editor"
  },
  {
    "objectID": "editor/uml.html",
    "href": "editor/uml.html",
    "title": "Verona Interfaces - Editor",
    "section": "",
    "text": "Verona Interfaces - Editor UML"
  },
  {
    "objectID": "editor/msg1_start.html",
    "href": "editor/msg1_start.html",
    "title": "Verona Interfaces - Editor",
    "section": "",
    "text": "Verona Interfaces - Editor Message1 Start"
  },
  {
    "objectID": "player/uml.html",
    "href": "player/uml.html",
    "title": "Verona Interfaces - Player",
    "section": "",
    "text": "Verona Interfaces - Player UML"
  },
  {
    "objectID": "player/index.html",
    "href": "player/index.html",
    "title": "Verona Interfaces - Player",
    "section": "",
    "text": "Verona Interfaces - Player"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Verona Interfaces - Standards für computerbasiertes Testen",
    "section": "",
    "text": "English version\n\n\n\nYou find a short introduction in English language at the end of this page.\n\n\n\nWillkommen\nIn Deutschland werden viele Erhebungen des Bildungsmonitorings dezentral durchgeführt, d. h. jedes Bundesland folgt eigenen Traditionen und Prioritäten. Auch zentral auf Ebene der KMK abgestimmte Lernstandserhebungen (VERA) benutzen zwar gleiche Aufgaben und methodische Verfahren, technisch und organisatorisch laufen aber auch diese Erhebungen getrennt in den Ländern. Eine zentrale technische Lösung würde in Deutschland den heterogenen Anforderungen nicht gerecht werden können.\nDaraus resultieren sehr hohe Anforderungen an die Modularität und Interoperabilität von technischen Lösungen im computerbasierten Testen. Sämtliche Programmierungen müssen über wohldokumentierte Schnittstellen verfügen. Die Initiative “Verona” hat das Ziel, diese Schnittstellendefinitionen zu erarbeiten und zu pflegen. An dieser Stelle finden Sie Verweise auf die Spezifikationen, aber vor allem ausführliche Erläuterungen für deren Nutzung (im Aufbau).\n\n\nSpezifikationen - Übersicht\nFolgende Spezifikationen liegen vor und werden in englischer Sprache gesondert in Repositorien geführt:\n\n\n\nModul\nBeschreibung\nDirekte Links\n\n\n\n\nPlayer\nKomponente, die eine Aufgabe in einer Testanwendung abspielt\nSpezifikation (Html), Modell (UML)\n\n\nEditor\nKomponente, mit der man Aufgaben gestaltet\nSpezifikation (Html)\n\n\nSchemer\nKomponente, mit der man die Kodieranweisungen für die Antwortverarbeitung festlegt\nSpezifikation (Html)\n\n\nMetadaten\nAlle o. g. Komponenten enthalten Metadaten auf einheitliche Art, die hier beschrieben ist.\nSchema Editor\n\n\n\n\n\nRedaktion\nDie vorliegenden Texte werden unter Federführung des Instituts zur Qualitätsentwicklung im Bildungswesen veröffentlicht. Autor*innen sind ggf. entweder im Kopf eines Dokumentes genannt oder zu Beginn eines größeren Seitenzweiges.\n\n\nLizenz\nAlle Texte sind unter der Lizenz CC0 veröffentlicht. Die Leitlinien zur Sicherung guter wissenschaftlicher Praxis (s. z. B. DFG-pdf) gebieten gleichwohl, dass die Quellen von Informationen genannt werden sollten.\n\n\nHaftungsausschluss\nAuf diesen Webseiten sind Links auf externe Webseiten in besonderer Weise gekennzeichnet (s. oben der Link zum IQB). Wir prüfen diese Quellen regelmäßig, können aber für diese Seiten und die dort hinterlegten Zusatzmaterialien keine Haftung für Richtigkeit, Vollständigkeit und Aktualität übernehmen. Dafür sind ausschließlich deren Betreiber verantwortlich.\n\n\nTechnische Realisierung\nDieser Webauftritt basiert auf Texten in einer einfachen Syntax Markdown, die anschließend in Html und CSS umgesetzt werden. Hierzu wird Quarto verwendet. Sämtliche Dateien für den Inhalt und die Steuerung sind in einem öffentlich zugänglichen Codeverwaltungssystem gespeichert. Eine Anleitung für Änderungen an den Inhalten finden Sie z. B. hier.\n\n\nKontakt\nWenn Sie Inhalte beitragen oder Probleme melden möchten, können Sie die Funktion “Problem melden” nutzen, die rechts auf jeder Seite zu finden ist. Sie werden dann zu GitHub weitergeleitet. Es ist ein Account bei GitHub erforderlich.\nAnsonsten kontakten Sie bitte die IT des IQB.\n\n\nEnglish: Verona Interface Specifications\nThe repositories located at /verona-interfaces consist of API specifications for assessment applications. In Germany, every state / Bundesland conducts assessments in schools and uses different technical solutions. In order to exchange assessment units or to share code modules, the data formats and interfaces need to be specified. The initiative ‘Verona’ works on these specifications.\nThis is an early stage of this endeavour, we did some first steps. To support this process, we publish this documentation in German language. Here you find a general introduction and clarifying of terms etc.\nBesides, the specifications come in separate repositories in English language: Player, Editor, Schemer and Metadata.\nContact: Institute for Educational Quality Improvement.",
    "crumbs": [
      "Start"
    ]
  },
  {
    "objectID": "intro/metadata.html",
    "href": "intro/metadata.html",
    "title": "Modul-Metadaten",
    "section": "",
    "text": "Ein Verona-Modul muss Metadaten enthalten. Der wichtigste Anwendungsfall hierfür ist die Auswahl und Speicherung von Modulen in Webanwendungen. Erst wenn z. B. die Bezeichnung und die Version eines Moduls auf standardisierte Art bekannt gemacht wird, können Anwender über die Verwendung sinnvoll entscheiden.\nEine Html-Seite kann auf diverse Arten Metadaten speichern. Im Verona-Kontext benutzen wir einen &lt;script&gt;-Block im Header, der ein JSON-Datenobjekt enthält. Diese Vorgehensweise wird als “Linked Data” bezeichnet, d. h. der Script-Typ wäre mit application/ld+json zu bezeichnen.\nDie vollständige Spezifikation mit Beispiel finden Sie hier. Der Umfang der Informationen ist recht ambitioniert. Es muss sich für viele Einträge jedoch erst herausstellen, ob sie nützlich sind bzw. ob die konkrete Umsetzung passt. Hierbei spielt wird die Entwicklung eines Modul-Registers helfen. Die folgende Liste enthält die Metadaten, die bisher in den Webanwendungen des IQB verwendet werden (Version 2.0).\n\nid\nDiese ID kann in internen Referenzen verwendet werden. Wenn beispielsweise eine Unitdefinition mit einem bestimmten Editor erzeugt wurde, kann die ID des Editor-Moduls die spätere Weiterarbeit sichern.\nAchtung: Um sicherzustellen, dass dann auch die passende Version des Moduls verwendet wird, sollte diese Version ebenfalls als Referenz abgespeichert werden, also z. B. iqb-editor-aspect@2.4.9. Dies kann auch der Dateiname des Moduls sein, obwohl in unixbasierten Systemen das @-Zeichen reserviert ist. Das IQB verwendet daher als Dateinamen die ID sowie die Version auf folgende Art: iqb-player-aspect-2.4.11.html.\n\n\nversion\nHier wird eine übliche SemVer-Notation erwartet, also auch mit Suffixen wie beta oder rc4.\n\n\ntype\nDie möglichen Werte dieser Aufzählung sind\n\n\n\nWert\nBeschreibung\n\n\n\n\nplayer\nEin Modul, das der Anzeige einer Unit dient. Es wird die Definition geladen, und eine Interaktion mit der Testperson startet\n\n\neditor\nEin Modul, das dem Ändern einer Unit-Defintion dient\n\n\nschemer\nEin Modul zur Änderung eines Kodierschemas für die Auswertung der Antworten\n\n\ncoder\nDieses Modul ist nur eine Idee. Ursprünglich war geplant, das automatische Kodieren ebenfalls als Verona-Modul zu implementieren. Aktuell wird dies jedoch über die Bereitstellung einer JavaScript-Klasse (npm) gelöst, die in Webanwendungen beim Build-Prozess eingebunden wird. Diese Programmierung kann also nicht zur Laufzeit dynamisch geladen werden. Dies stellt aktuell die bessere Lösung dar.\n\n\n\n\n\nname\nDiese Bezeichnung erscheint als Label z. B. in Auswahllisten, da die ID zu knapp und wenig verständlich ist.\n\n\ndescription\nHier soll eine knappe Beschreibung helfen, die Besonderheiten dieses Moduls zu erkennen und darüber zu entscheiden, ob das Modul für die eigenen Zwecke interessant sein könnte.\n\n\nspecVersion\nDieser String erklärt, welche Version der Modul-Interfacedefinition unterstützt wird. Da Interfacedefinitionen einer Entwicklung unterliegen und Eigenschaften geändert und hinzugefügt werden, sollte sich eine Hostanwendung darauf einstellen, welchen Dialekt der Kommunikation das Modul versteht.\nAllerdings kann man diese Information auch ignorieren und als Host einfach alle Varianten unterstützen. Wenn eine bestimmte Information nicht gefunden wird in einem Datenobjekt eines Players, versucht der Host andere Bezeichnungen oder Datenformate entsprechend älterer Varianten der Spezifikation. Dieses defensive Verhalten erhöht die Robustheit der Programmierung.",
    "crumbs": [
      "Einführung",
      "Modul-Metadaten"
    ]
  },
  {
    "objectID": "intro/registry.html",
    "href": "intro/registry.html",
    "title": "Modul-Register",
    "section": "",
    "text": "Derzeit ist die Liste der verfügbaren Module noch sehr überschaubar. Nur das IQB stellt Verona-Module bereit.\nSollte die Anzahl steigen, wäre die Einführung eines Registers angebracht. Webanwendungen können dann gezielt Module anbieten.",
    "crumbs": [
      "Einführung",
      "Modul-Register"
    ]
  }
]